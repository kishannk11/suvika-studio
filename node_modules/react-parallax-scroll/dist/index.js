"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Layer", {
  enumerable: true,
  get: function get() {
    return _Layer["default"];
  }
});
Object.defineProperty(exports, "AppearLayer", {
  enumerable: true,
  get: function get() {
    return _AppearLayer["default"];
  }
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _context = _interopRequireDefault(require("./Utils/context"));

var _Layer = _interopRequireDefault(require("./Components/Layer"));

var _AppearLayer = _interopRequireDefault(require("./Components/AppearLayer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Parallax =
/*#__PURE__*/
function (_Component) {
  _inherits(Parallax, _Component);

  function Parallax(props) {
    var _this;

    _classCallCheck(this, Parallax);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Parallax).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "addLayer", function (layer) {
      _this.layers.push(layer);
    });

    _defineProperty(_assertThisInitialized(_this), "removeLayer", function (layer) {
      _this.layers = _this.layers.filter(function (ly) {
        return ly !== layer;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "addAppearLayer", function (layer) {
      _this.appearLayers.push(layer);
    });

    _defineProperty(_assertThisInitialized(_this), "removeAppearLayer", function (layer) {
      _this.appearLayers = _this.appearLayers(function (ly) {
        return ly !== layer;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getContext", function () {
      return {
        addLayer: _this.addLayer,
        removeLayer: _this.removeLayer,
        addAppearLayer: _this.addAppearLayer,
        removeAppearLayer: _this.removeAppearLayer
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleScroll", function () {
      window.requestAnimationFrame(_this.check);
    });

    _defineProperty(_assertThisInitialized(_this), "check", function () {
      _this.checkParallaxItems();

      _this.checkAppearItems();
    });

    _defineProperty(_assertThisInitialized(_this), "isOnScreen", function (layer) {
      var position = layer.ref.current.getBoundingClientRect();
      return position.top < window.innerHeight && position.bottom >= 0;
    });

    _defineProperty(_assertThisInitialized(_this), "checkAppearItems", function () {
      _this.appearLayers.forEach(function (layer) {
        if (_this.isOnScreen(layer)) {
          _this.appear(layer);
        } else {//handle disappear
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "checkParallaxItems", function () {
      _this.layers.forEach(function (layer) {
        if (_this.isOnScreen(layer)) {
          _this.draw(layer);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "appear", function (layer) {
      layer.ref.current.style['animation-duration'] = layer.settings.duration;

      if (layer.settings.loop) {
        layer.ref.current.style['animation-iteration-count'] = layer.settings.loop;
      }

      layer.ref.current.classList.add(layer.settings["in"]);
    });

    _defineProperty(_assertThisInitialized(_this), "draw", function (layer) {
      var item = layer.ref.current;
      var position = item.getBoundingClientRect();
      var settings = layer.settings || {
        type: 'backgroundY',
        speed: 0.3
      };
      var speed = settings.speed;
      var newValue = -Math.floor(speed * position.top);
      var min = settings.min || (speed < 0 ? -_this.offset : newValue);
      var max = settings.max || (speed > 0 ? _this.offset : newValue);

      if (newValue < min) {
        newValue = min;
      } else if (newValue > max) {
        newValue = max;
      }

      var updatedValues = {};

      if (Array.isArray(settings.type)) {
        settings.type.forEach(function (t) {
          var _this$getChangedValue = _this.getChangedValue(t, newValue),
              key = _this$getChangedValue.key,
              value = _this$getChangedValue.value;

          if (!updatedValues[key]) {
            updatedValues[key] = [];
          }

          updatedValues[key].push(value);
        });
      } else {
        var _this$getChangedValue2 = _this.getChangedValue(settings.type, newValue),
            key = _this$getChangedValue2.key,
            value = _this$getChangedValue2.value;

        updatedValues[key] = [value];
      } // eslint-disable-next-line


      for (var _key in updatedValues) {
        item.style[_key] = updatedValues[_key].join(' ');
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getChangedValue", function (type, value) {
      switch (type) {
        case 'translateY':
          return {
            key: 'transform',
            value: "translateY(".concat(value, "px)")
          };

        case 'translateX':
          return {
            key: 'transform',
            value: "translateX(".concat(value, "px)")
          };
        // case 'scale':
        //   const scale = value >= 0 ? Math.abs(value / 100) : Math.abs(100 / value);
        //   return {
        //     key: 'transform',
        //     value: `scale(${scale})`
        //   }

        case 'rotate':
          return {
            key: 'transform',
            value: "rotate(".concat(value, "deg)")
          };

        case 'backgroundPositionX':
          return {
            key: 'backgroundPosition',
            value: "".concat(value, "px center")
          };

        default:
          return {
            key: 'backgroundPosition',
            value: "center ".concat(value, "px")
          };
      }
    });

    _this.layers = [];
    _this.appearLayers = [];
    _this.offset = props.offset || 100;
    return _this;
  }

  _createClass(Parallax, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setup();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.handleScroll);
    }
  }, {
    key: "setup",
    value: function setup() {
      window.addEventListener('scroll', this.handleScroll);
      window.dispatchEvent(new Event('scroll'));
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement(_context["default"].Provider, {
        value: this.getContext()
      }, this.props.children);
    }
  }]);

  return Parallax;
}(_react.Component);

exports["default"] = Parallax;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,